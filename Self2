import tkinter as tk
from tkinter import filedialog, messagebox
import tempfile
import os
from pygame import mixer  # Make sure to install pygame using pip install pygame

class AudioReceiverApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Audio Receiver App")

        tk.Label(master, text="Select Encrypted Audio File:").pack()
        self.file_path = tk.StringVar()
        tk.Entry(master, textvariable=self.file_path, state='readonly').pack(side=tk.LEFT)
        tk.Button(master, text="Browse", command=self.browse_file).pack(side=tk.RIGHT)

        tk.Label(master, text="Decryption Key:").pack()
        self.decryption_key = tk.StringVar()
        tk.Entry(master, textvariable=self.decryption_key).pack()

        tk.Button(master, text="Decrypt and Play", command=self.decrypt_and_play).pack()

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Audio files", "*.bin")])
        self.file_path.set(file_path)

    def decrypt_and_play(self):
        try:
            key = self.decryption_key.get()
            with open(self.file_path.get(), 'rb') as encrypted_audio_file:
                encrypted_audio = encrypted_audio_file.read()

            decrypted_audio = self.decrypt_audio(encrypted_audio, key)

            # Save the decrypted audio to a temporary file
            temp_file_path = self.save_temp_file(decrypted_audio)

            # Play the audio from the temporary file
            self.play_audio(temp_file_path)
        except:
            messagebox.showerror("Invalid Key")

    def decrypt_audio(self, encrypted_audio, key):
        # Simple method to remove the key from the encrypted data
        decrypted_data = encrypted_audio[len(key.encode()):]
        return decrypted_data

    def save_temp_file(self, audio_data):
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
        temp_file_path = temp_file.name
        temp_file.write(audio_data)
        temp_file.close()
        return temp_file_path

    def play_audio(self, audio_file_path):
        # Initialize Pygame mixer
        mixer.init()

        # Load the temporary audio file into Pygame mixer
        mixer.music.load(audio_file_path)

        # Play the audio
        mixer.music.play()

        # Wait for the audio to finish playing
        while mixer.music.get_busy():
            continue

        # Delete the temporary audio file
        os.remove(audio_file_path)

if __name__ == "__main__":
    root = tk.Tk()
    app = AudioReceiverApp(root)
    root.mainloop()
